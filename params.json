{"name":"Docs","tagline":"markdown documents","body":"How HAproxy helps improve mysql performance\r\n===========================================\r\n\r\n### pre test: push to the limit\r\n\r\nserver1: mysql server\r\nip: 192.168.1.246\r\ncpu: 1, ram: 1G\r\n\r\nserver2: mysqlslap, haproxy\r\nip: 192.168.1.247\r\ncpu: 1, ram: 1G\r\n\r\n* first learn the limit of mysql server: (in real app, may test most time consuming or cpu consuming queries)\r\n\r\n```bash\r\n#- run mysqlslap tool at server2,192.168.1.247\r\n#- concurrent level 220\r\n#- iterations 5 : run 5 times and then calculate average.\r\n#- number-of-queries 30000 : total queries in one test.\r\n\r\nmysqlslap --create-schema=test --user=root --password=xxxxxxx \\\r\n-h 192.168.1.246 -P 3306 \\\r\n--query=\"select * from a;\" \\\r\n--concurrency=220 --iterations=5 \\\r\n--number-of-queries=30000 \r\n\r\nBenchmark\r\nAverage number of seconds to run all queries: 6.645 seconds\r\nMinimum number of seconds to run all queries: 6.568 seconds\r\nMaximum number of seconds to run all queries: 6.756 seconds\r\nNumber of clients running queries: 220\r\nAverage number of queries per client: 136\r\n\r\n#- change concurrent level to 240\r\nBenchmark\r\nAverage number of seconds to run all queries: 6.758 seconds\r\nMinimum number of seconds to run all queries: 6.650 seconds\r\nMaximum number of seconds to run all queries: 6.852 seconds\r\nNumber of clients running queries: 240\r\nAverage number of queries per client: 125\r\n\r\n#- increase concurrent level to 260\r\nAverage number of seconds to run all queries: 6.540 seconds\r\nMinimum number of seconds to run all queries: 6.418 seconds\r\nMaximum number of seconds to run all queries: 6.653 seconds\r\nNumber of clients running queries: 260\r\nAverage number of queries per client: 115\r\n\r\n#- increate concurrent level to 280; failed, hanged\r\n```\r\n\r\n* though concurrent=220 made system load more than 4.00, server2 survived until concurrent level > 260\r\n\r\n## Case 1: under high concurrent level\r\n\r\n* in the last example, high concurrency cause some hanged queries in mysql server thus lead to low performance.\r\n\r\n  (\"max_connections\" system variable in mysql is not quit relevant to the concurrent level.)\r\n\r\n* here comes haproxy to deal with this problem\r\n\r\n  haproxy have a variable \"maxconn\" to limit concurrent connections passed to mysql\r\n\r\n  lets say set maxconn=80, listen port 3308\r\n\r\n  aggressively set concurrency=300\r\n\r\n```bash\r\n#- run mysqlslap tool at server2,192.168.1.247\r\n#- note that mysqlslap connected to 192.168.1.247:3308\r\n\r\nmysqlslap --create-schema=test --user=root --password=xxxxxxx \\\r\n-h 192.168.1.247 -P 3308 \\\r\n--query=\"select * from a;\" \\\r\n--concurrency=300 --iterations=5 \\\r\n--number-of-queries=30000 \r\n\r\nBenchmark\r\nAverage number of seconds to run all queries: 5.559 seconds\r\nMinimum number of seconds to run all queries: 5.450 seconds\r\nMaximum number of seconds to run all queries: 5.735 seconds\r\nNumber of clients running queries: 300\r\nAverage number of queries per client: 100\r\n```\r\n\r\n* Oh, **average 5.559 seconds**. Quicker than concurrency=260 without HAproxy.\r\n\r\n  HAproxy will certainly use cpu but that is another story.\r\n\r\n* continuous tests:\r\n\r\n  (seems like maxconn=80 is a better choice of haproxy setting for server1, poor testing machine)\r\n\r\n```\r\n#- change haproxy maxconn=100,120,140,180\r\n\r\nBenchmark\r\nAverage number of seconds to run all queries: 5.872 seconds\r\nMinimum number of seconds to run all queries: 5.589 seconds\r\nMaximum number of seconds to run all queries: 6.564 seconds\r\nNumber of clients running queries: 300\r\nAverage number of queries per client: 100\r\nBenchmark\r\nAverage number of seconds to run all queries: 5.737 seconds\r\nMinimum number of seconds to run all queries: 5.564 seconds\r\nMaximum number of seconds to run all queries: 6.057 seconds\r\nNumber of clients running queries: 300\r\nAverage number of queries per client: 100\r\nBenchmark\r\nAverage number of seconds to run all queries: 6.103 seconds\r\nMinimum number of seconds to run all queries: 5.598 seconds\r\nMaximum number of seconds to run all queries: 7.573 seconds\r\nNumber of clients running queries: 300\r\nAverage number of queries per client: 100\r\nBenchmark\r\nAverage number of seconds to run all queries: 10.770 seconds\r\nMinimum number of seconds to run all queries: 5.647 seconds\r\nMaximum number of seconds to run all queries: 18.041 seconds\r\nNumber of clients running queries: 300\r\nAverage number of queries per client: 100\r\n```\r\n\r\n* ref\r\n\r\nhttp://docs.oracle.com/cd/E17952_01/refman-5.5-en/mysqlslap.html\r\n\r\nhttp://flavio.tordini.org/a-more-stable-mysql-with-haprox","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}